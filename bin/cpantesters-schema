#!/usr/bin/env perl
# ABSTRACT: Install, upgrade and examine the CPAN Testers database schema
# PODNAME: cpantesters-schema
our $VERSION = '0.023';

=head1 SYNOPSIS

    # prepare a new upgrade script
    cpantesters-schema prepare --preversion <version>

    # install a new database
    cpantesters-schema install

    # install a database to the given DSN
    cpantesters-schema install dbi:SQLite:local.db

    # upgrade an existing database
    cpantesters-schema upgrade

    # check what version our database is running
    cpantesters-schema check

=head1 DESCRIPTION

This script works with L<DBIx::Class::Schema::Versioned> to prepare a new
database upgrade script, install the database, upgrade the database, or
check the database version and available upgrades.

=head1 ARGUMENTS

=head2 <command>

The command to run. One of C<check>, C<install>, C<upgrade>, C<prepare>.

C<check> will show the current database version and the list of
potential versions. C<install> will install a new database from scratch
or prepare an existing database to be upgraded. C<upgrade> will upgrade
the current database. C<prepare> is run during development to prepare
a new upgrade script.

=head1 OPTIONS

=head2 --preversion

The previous version. Used by the C<prepare> command to determine which
upgrade script to make.

=head1 SEE ALSO

L<DBIx::Class::Schema::Versioned>

=cut

use v5.24;
use warnings;
use Pod::Usage;
use Getopt::Long;
use CPAN::Testers::Schema;
use File::Share qw( dist_dir );

my ( $preversion, $help );
GetOptions(
    'p|preversion:s'  => \$preversion,
) or pod2usage(1);

my %tasks = (
    prepare => \&prepare,
    install => \&install,
    upgrade => \&upgrade,
    check => \&check,
);

$tasks{ shift @ARGV }->();

sub prepare {
    my $schema = CPAN::Testers::Schema->connect_from_config;
    my $sql_dir = dist_dir( 'CPAN-Testers-Schema' );
    my $version = $schema->schema_version();
    $schema->create_ddl_dir( 'MySQL', $version, $sql_dir, $preversion );

    $schema = CPAN::Testers::Schema->connect( 'dbi:SQLite::memory:' );
    $schema->create_ddl_dir( 'SQLite', $version, $sql_dir, $preversion );
}

sub check {
    my $schema = CPAN::Testers::Schema->connect_from_config;
    say "  Current: " . $schema->get_db_version;
    say "Available: " . join ", ", $schema->ordered_schema_versions;
}

sub install {
    my $schema;
    if ( $ARGV[0] ) {
        $schema = CPAN::Testers::Schema->connect( $ARGV[0] );
    }
    else {
        $schema = CPAN::Testers::Schema->connect_from_config;
    }
    $schema->install( '0.000' );
    $schema->upgrade;
}

sub upgrade {
    my $schema = CPAN::Testers::Schema->connect_from_config;
    $schema->upgrade;
}

