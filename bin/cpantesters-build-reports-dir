#!/usr/bin/env perl
# ABSTRACT: Migrate reports from the database to the reports dir
# PODNAME: cpantesters-build-reports-dir
our $VERSION = '0.028';

=head1 SYNOPSIS

  # dump all reports to reports-dir
  cpantesters-build-reports-dir ./reports-dir

  # dump reports starting from ID 1000
  cpantesters-build-reports-dir ./reports-dir 1000

=head1 DESCRIPTION

This script is for dumping raw report data from the current database
storage locations to a L<CPAN::Testers::ReportsDir>.

=head1 ARGUMENTS

=head2 <reports-dir>

The root directory of the L<CPAN::Testers::ReportsDir>.

=head2 <start_id>

Optional. The starting ID for restarting an incomplete dump.

=head1 OPTIONS

=head2 --raw | -r

If specified, will also dump the complete database row as a file with a C<.metabase>
or C<.database> extension.

=head2 --max <count>

Stop processing reports after processing C<count>.

=head1 SEE ALSO

L<CPAN::Testers::ReportsDir> for storage API, L<CPAN::Testers::Schema::ResultSet::TestReport> for data conversion functions

=cut

$|++;

use v5.24;
use warnings;
use Pod::Usage;
use Getopt::Long qw( GetOptionsFromArray :config pass_through );
use CPAN::Testers::Schema;
use CPAN::Testers::ReportsDir;
use YAML::XS ();
use Log::Any::Adapter 'Stderr';
use Log::Any qw( $LOG ), log_level => 'trace';

my %opt = (
       	raw => 0,
	max => 2_000_000_000,
);
GetOptions(\%opt, 'raw|r', 'max=i' ) or pod2usage(1);

sub main {
  $LOG->info('Starting ' . $0);
  my ( @args ) = @_;
  my ( $reports_root, $start_id ) = @args;
  $start_id //= 0;

  my $rdb = CPAN::Testers::ReportsDir->new( root => $reports_root );
  $LOG->info('Connecting to CPAN::Testers::Schema');
  my $schema = CPAN::Testers::Schema->connect_from_config;
  my $rs = $schema->resultset('TestReport');
  my $total_processed = 0;
  my $page_size = 1000;
  my $got_rows = 0;

  # Start crawling through the metabase.metabase table
  $LOG->info('Connecting to Metabase');
  my $dbi = DBI->connect('dbi:mysql:mysql_read_default_file=~/.cpanstats.cnf;mysql_read_default_group=application;database=metabase');
  while ( $total_processed <= 0 || $got_rows >= $page_size ) {
    $LOG->info('Executing Metabase read', { total_processed => $total_processed, page_size => $page_size, start_id => $start_id });
    my $sth = $dbi->prepare('SELECT * FROM metabase.metabase WHERE id >= ? LIMIT ' . $page_size);
    $sth->execute($start_id);
    $got_rows = 0;
    while ( my $mb_row = $sth->fetchrow_hashref ) {
      $got_rows++;
      if ( $opt{raw} ) {
	$rdb->write( "$mb_row->{guid}.metabase", YAML::XS::Dump( $mb_row ), timestamp => Time::Piece->new( $mb_row->{updated} ) );
      }
      my $metabase_report = $rs->parse_metabase_report( $mb_row );
      my $test_report_row = $rs->convert_metabase_report( $metabase_report );
      $rdb->write( $test_report_row->{id}, YAML::XS::Dump( $test_report_row->{report} ), timestamp => $test_report_row->{created} );
      $start_id = $mb_row->{id} + 1;
    }
    $LOG->info( "Read rows from Metabase", { got_rows => $got_rows, page_size => $page_size, next_start_id => $start_id });
  }
  $LOG->info("Finished converting Metabase");

  # Start crawling through the cpanstats.test_reports table
  # TODO

  return 0;
}

exit main( @ARGV ) unless caller;
